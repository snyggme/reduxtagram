{"version":3,"sources":["reducers/posts.js","reducers/comments.js","reducers/index.js","store.js","serviceWorker.js","components/Photo.js","components/Comments.js","components/Single.js","components/PhotoGrid.js","components/Main.js","utils/network.js","actions/actionCreator.js","App.js","index.js"],"names":["initialState","arr","isLoading","posts","state","arguments","length","undefined","action","type","i","index","Object","objectSpread","toConsumableArray","slice","concat","likes","comments","postId","defineProperty","console","log","user","author","text","comment","postComments","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","Boolean","window","location","hostname","match","Photo","props","post","react_default","a","createElement","className","Link","to","code","src","display_src","alt","caption","react_transition_group","transitionName","transitionEnterTimeout","transitionLeaveTimeout","key","onClick","increment","bind","aria-hidden","Comments","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","authorRef","React","createRef","commentRef","handleSubmit","assertThisInitialized","renderComments","removeComment","id","e","preventDefault","current","value","addComment","form","reset","map","ref","onSubmit","placeholder","hidden","Component","Single","findIndex","components_Photo","assign","components_Comments","PhotoGrid","getPosts","Main","Switch","Route","exact","path","render","routerProps","components_PhotoGrid","_ref","components_Single","params","httpGet","asyncToGenerator","regenerator_default","mark","_callee","endPoint","response","json","wrap","_context","prev","next","fetch","sent","ok","abrupt","Error","status","t0","stop","_x","apply","chached","showLike","dispatch","then","catch","App","withRouter","connect","bindActionCreators","actionCreators","ReactDOM","es","BrowserRouter","basename","process","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76e3b5e2.chunk.js","sourcesContent":["const initialState = {\r\n\tarr: [],\r\n\tisLoading: false\r\n}\r\n\r\nconst posts = (state = initialState, action) => {\r\n\tswitch(action.type) {\r\n\t\tcase 'INCREMENT_LIKES':\r\n\t\t\tconst i = action.index;\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tarr: [\r\n\t\t\t\t\t...state.arr.slice(0, i),\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t...state.arr[i], \r\n\t\t\t\t\t\tlikes: +state.arr[i].likes + 1\r\n\t\t\t\t\t}, \r\n\t\t\t\t\t...state.arr.slice(i + 1)\r\n\t\t\t\t]\r\n\t\t\t};\r\n\t\tcase 'GET_POSTS_REQUEST':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisLoading: true\r\n\t\t\t};\r\n\t\tcase 'GET_POSTS_SUCCESS':\r\n\t\t\treturn {\r\n\t\t\t\tarr: [...action.posts],\r\n\t\t\t\tisLoading: false\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default posts;","function comments(state = [], action) {\r\n\tif (action.type === 'GET_COMMENTS_SUCCESS') {\r\n\t\treturn { ...action.comments };\r\n\t}\r\n\r\n\tif (typeof action.postId !== 'undefined') {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\t[action.postId]: postComments(state[action.postId], action)\r\n\t\t}\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\nfunction postComments(state = [], action) {\r\n\tconsole.log(state)\r\n\tswitch(action.type) {\r\n\t\tcase 'ADD_COMMENT':\r\n\t\t\treturn [...state, {\r\n\t\t\t\tuser: action.author,\r\n\t\t\t\ttext: action.comment\r\n\t\t\t}];\r\n\t\tcase 'REMOVE_COMMENT':\r\n\t\t\treturn [\r\n\t\t\t\t...state.slice(0, action.i),\r\n\t\t\t\t...state.slice( action.i + 1)\r\n\t\t\t];\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\n\r\nexport default comments;","import { combineReducers } from 'redux';\r\nimport posts from './posts'\r\nimport comments from './comments' \r\n\r\nconst rootReducer = combineReducers({ posts, comments });\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/index';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n// import { CSSTransition } from 'react-transition-group';\r\nimport { CSSTransitionGroup } from 'react-transition-group'\r\n\r\nconst Photo = (props) => {\r\n\tconst { post, i, comments } = props;\r\n\r\n\treturn(\r\n\t\t<figure className='grid-figure'>\r\n\t\t\t<div className='grid-photo-wrap'>\r\n\t\t\t\t<Link to={`/view/${post.code}`}>\r\n\t\t\t\t\t<img \r\n\t\t\t\t\t\tsrc={post.display_src} \r\n\t\t\t\t\t\talt={post.caption}\r\n\t\t\t\t\t\tclassName='grid-photo' />\r\n\t\t\t\t</Link>\r\n\t\t\t\t<CSSTransitionGroup\r\n                    transitionName=\"like\"\r\n\t\t\t        transitionEnterTimeout={400}\r\n\t\t\t        transitionLeaveTimeout={400}>\r\n\t\t\t\t    <span key={post.likes} className='likes-heart'>\r\n\t\t\t\t\t\t{post.likes}\r\n\t\t\t\t\t</span>\t\t\r\n\t\t\t\t</CSSTransitionGroup>\r\n\t\t\t</div>\r\n\t\t\t<figcaption>\r\n\t\t\t\t<p>{post.caption}</p>\r\n\t\t\t\t<div className='control-buttons'>\r\n\t\t\t\t\t<button onClick={props.increment.bind(null, i)} className='like'>\r\n\t\t\t\t\t\t<i className=\"fa fa-heart\" aria-hidden=\"true\"></i> {post.likes}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<Link className='button' to={`/view/${post.code}`}>\r\n\t\t\t\t\t\t<span className='comment-count'>\r\n\t\t\t\t\t\t\t<span />\r\n\t\t\t\t\t\t\t<i className=\"fa fa-comments\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t{comments[post.code] ? comments[post.code].length : 0}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</div>\r\n\t\t\t</figcaption>\r\n\t\t</figure>\r\n\t)\r\n}\r\n\r\nexport default Photo;","import React, { Component } from 'react';\r\n\r\nclass Comments extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.authorRef = React.createRef();\r\n\t\tthis.commentRef = React.createRef();\r\n\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t\tthis.renderComments = this.renderComments.bind(this);\r\n\t}\r\n\trenderComments(comment, i) {\r\n\t\treturn (\r\n\t\t\t<div className='comment' key={i}>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<strong>{comment.user}</strong>\r\n\t\t\t\t\t{comment.text}\r\n\t\t\t\t\t<button \r\n\t\t\t\t\t\tclassName='remove-comment' \r\n\t\t\t\t\t\tonClick={this.props.removeComment.bind(null, this.props.id.postId, i)}>\r\n\t\t\t\t\t\t&times;\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\thandleSubmit(e) {\r\n\t\te.preventDefault();\r\n\r\n\t\tconst { postId } = this.props.id;\r\n\t\tconst author = this.authorRef.current.value;\r\n\t\tconst comment = this.commentRef.current.value;\r\n\r\n\t\tthis.props.addComment(postId, author, comment);\r\n\r\n\t\tthis.authorRef.current.form.reset();\r\n\t}\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className='comments'>\r\n\t\t\t\t{this.props.postComments.map(this.renderComments)}\r\n\t\t\t\t<form ref='commentForm' className='comment-form' onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t<input type='text' ref={this.authorRef} placeholder='author' />\r\n\t\t\t\t\t<input type='text' ref={this.commentRef} placeholder='comment' />\r\n\t\t\t\t\t<input type='submit' hidden />\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Comments;","import React from 'react';\r\nimport Photo from './Photo';\r\nimport Comments from './Comments';\r\n\r\nconst Single = (props) => {\r\n\tconst i = props.posts.findIndex((post) => post.code === props.id.postId);\r\n\tconst post = props.posts[i];\r\n\tconst postComments = props.comments[props.id.postId] || [];\r\n\r\n\treturn (\r\n\t\t<div className='single-photo'>\r\n\t\t\t<Photo i={i} post={post} {...props} />\r\n\t\t\t<Comments postComments={postComments} {...props} />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Single;","import React, { Component } from 'react';\r\nimport Photo from './Photo';\r\n\r\nclass PhotoGrid extends Component {\r\n\tcomponentDidMount() {\r\n\t\tthis.props.getPosts();\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className='photo-grid'>\r\n\t\t\t\t{ this.props.isLoading \r\n\t\t\t\t\t? <div className='loading'></div>\r\n\t\t\t\t\t: this.props.posts.map((post, i) => \r\n\t\t\t\t\t\t<Photo {...this.props} key={i} i={i} post={post} />)\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default PhotoGrid;","import React from 'react';\r\nimport { Switch, Route, Link } from 'react-router-dom';\r\nimport Single from './Single';\r\nimport PhotoGrid from './PhotoGrid';\r\n\r\nconst Main = (props) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>\r\n\t\t\t\t<Link to='/'>Reduxtagram</Link>\r\n\t\t\t</h1>\r\n\t\t\t<Switch>\r\n\t           \t<Route exact path='/' render={(routerProps) => (\r\n                    <PhotoGrid {...routerProps} {...props} />\r\n                )}/>                   \r\n\t           \t<Route path='/view/:postId' render={({match}) => (\r\n                    <Single id={match.params} {...props}/>\r\n                )}/>\r\n\t        </Switch>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Main;","const API_ROOT = 'https://5bc443613e0ce20013533336.mockapi.io';\r\n\r\nexport const httpGet = async endPoint => {\r\n    try {\r\n        const response = await fetch(`${API_ROOT}/${endPoint}`);\r\n\r\n        if (response.ok) {\r\n            const json = await response.json();\r\n\r\n            return json;\r\n        } else {\r\n            throw new Error(response.status);\r\n        }\r\n    } catch (err) {\r\n        console.log('httpGet error ', err);\r\n    }\r\n}","import { httpGet } from '../utils/network'\r\n\r\nlet chached = false;\r\n\r\nexport function increment(index, showLike) {\r\n\treturn {\r\n\t\ttype: 'INCREMENT_LIKES',\r\n\t\tindex\r\n\t}\r\n}\r\n\r\nexport function addComment(postId, author, comment) {\r\n\treturn {\r\n\t\ttype: 'ADD_COMMENT',\r\n\t\tpostId,\r\n\t\tauthor,\r\n\t\tcomment\r\n\t}\r\n}\r\n\r\nexport function removeComment(postId, i) {\r\n\treturn {\r\n\t\ttype: 'REMOVE_COMMENT',\r\n\t\ti,\r\n\t\tpostId\r\n\t}\r\n}\r\n\r\nexport function getPosts() {\r\n\treturn dispatch => {\r\n\t\tif (!chached) {\r\n\t\t\tchached = true;\r\n\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: 'GET_POSTS_REQUEST'\r\n\t\t\t});\r\n\r\n\t\t\thttpGet('posts')\r\n\t\t\t\t.then(json => {\r\n\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\ttype: 'GET_POSTS_SUCCESS',\r\n\t\t\t\t\t\tposts: json.posts\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\ttype: 'GET_COMMENTS_SUCCESS',\r\n\t\t\t\t\t\tcomments: json.comments\r\n\t\t\t\t\t});\r\n\t\t\t\t})\r\n\t\t      \t.catch(e => {\r\n\t\t      \t\tconsole.log(e);\r\n\t\t      \t})\r\n\t\t}\r\n\t}\r\n}\r\n","import Main from './components/Main'\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport * as actionCreators from './actions/actionCreator';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tposts: state.posts.arr,\r\n\t\tcomments: state.comments,\r\n\t\tisLoading: state.posts.isLoading\r\n\t}\r\n};\r\n\r\nconst mapDispachToProps = dispatch => {\r\n\treturn bindActionCreators(actionCreators, dispatch)\r\n};\r\n\r\nconst App = withRouter(connect(mapStateToProps, mapDispachToProps)(Main));\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './styles/index.scss';\r\nimport App from './App';\r\n\r\nconst Root = ({ store }) => (\r\n\t<Provider store={store}>\r\n    \t<Router basename={process.env.PUBLIC_URL}>\r\n\t\t\t<App />\r\n\t\t</Router>\r\n  \t</Provider>\r\n)\r\n\r\nReactDOM.render(\r\n\t<Root store={store}/>,\r\n\t document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}